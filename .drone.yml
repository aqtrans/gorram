kind: pipeline
name: gorram

steps:
- name: get deps
  image: golang
  volumes:
    - name: deps
      path: /go
  commands:
    - go get -d
    - cd checks/
    - go get -d

- name: generate protobuf
  image: golang
  volumes:
    - name: deps
      path: /go
  commands:
    - echo deb http://deb.debian.org/debian/ stable main > /etc/apt/sources.list
    - apt-get update -y && apt-get install unzip -y
    - curl -o protoc.zip -sL https://github.com/protocolbuffers/protobuf/releases/download/v3.11.0/protoc-3.11.0-linux-x86_64.zip
    - unzip protoc.zip -d /protoc  
    - export PATH=$PATH:/protoc/bin:$GOPATH/bin
    - go get -u github.com/golang/protobuf/protoc-gen-go
    - go generate

- name: test server
  image: golang
  volumes:
    - name: deps
      path: /go
  commands:
    - cd server/
    - go test
    - go test -race
    - go test -cover
    - go test -bench=.

- name: build server
  image: golang
  volumes:
    - name: deps
      path: /go
  commands:
    - cd server/
    - go build -ldflags "-X main.sha1ver=$(git rev-parse HEAD) -X main.buildTime=$(date +'%Y-%m-%d_%T')" -o ../gorram-server

- name: test client
  image: golang
  volumes:
    - name: deps
      path: /go
  commands:
    - cd client/
    - go test
    - go test -race
    - go test -cover
    - go test -bench=.

- name: build client
  image: golang
  volumes:
    - name: deps
      path: /go
  commands:
    - cd client/
    - go build -ldflags "-X main.sha1ver=$(git rev-parse HEAD) -X main.buildTime=$(date +'%Y-%m-%d_%T')" -o ../gorram-client

- name: build cli
  image: golang
  volumes:
    - name: deps
      path: /go
  commands:
    - cd cli/
    - go build -o ../gorram-cli

- name: build certs
  image: golang
  volumes:
    - name: deps
      path: /go
  commands:
    - cd certs/gorram-certs
    - go build -o ../../gorram-certs

- name: package
  pull: never
  image: deb-pkg
  commands: 
    - dch -M -v 1.0.$DRONE_BUILD_STARTED "New version from Git commit $(git rev-parse HEAD)" && dch -M -r -D buster ""
    - debuild -us -uc -b
    - mv ../gorram_*.deb ./gorram.deb

- name: deploy to bob
  image: alpine
  environment:
    SSH_KEY:
      from_secret: ssh_key
  commands:
    - mkdir $HOME/.ssh
    - echo "$SSH_KEY" > $HOME/.ssh/id_ed25519
    - cat $HOME/.ssh/id_ed25519
    - chmod 600 $HOME/.ssh/id_ed25519
    - apk add --no-cache openssh
    - ssh-keyscan -H bob.jba.io > $HOME/.ssh/known_hosts
    - scp ./gorram.deb deploy@bob.jba.io:/home/deploy/
    - ssh deploy@bob.jba.io sudo dpkg -i gorram.deb

- name: deploy to rick
  image: alpine
  environment:
    SSH_KEY:
      from_secret: ssh_key
  commands:
    - mkdir $HOME/.ssh
    - echo "$SSH_KEY" > $HOME/.ssh/id_ed25519
    - cat $HOME/.ssh/id_ed25519
    - chmod 600 $HOME/.ssh/id_ed25519
    - apk add --no-cache openssh
    - ssh-keyscan -H rick.jba.io > $HOME/.ssh/known_hosts
    - scp ./gorram.deb deploy@rick.jba.io:/home/deploy/
    - ssh deploy@rick.jba.io sudo dpkg -i gorram.deb  

- name: deploy to repo
  image: alpine
  environment:
    DEPLOY_HOST: 'repo@bob.jba.io'
    SSH_KEY:
      from_secret: ssh_key    
  commands:
    - mkdir $HOME/.ssh
    - echo "$SSH_KEY" > $HOME/.ssh/id_ed25519
    - chmod 600 $HOME/.ssh/id_ed25519
    - apk add --no-cache openssh
    - ssh-keyscan -H bob.jba.io > $HOME/.ssh/known_hosts  
    - ssh-keyscan -H git.jba.io >> $HOME/.ssh/known_hosts     
    - scp gorram.deb $DEPLOY_HOST:/home/repo/gorram.deb
    - ssh $DEPLOY_HOST reprepro -b www/debian/ includedeb buster gorram.deb 

- name: notify
  image: plugins/pushover
  settings:
    user:
      from_secret: pushover_user
    token:
      from_secret: pushover_token
  when:
    status:
    - success
    - failure

volumes:
  - name: deps
    temp: {}  