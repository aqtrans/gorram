// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/gorram.proto

/*
Package gorram is a generated protocol buffer package.

It is generated from these files:
	proto/gorram.proto

It has these top-level messages:
	PingMsg
	PingResponse
	Submitted
	Issue
	Alert
	ConfigRequest
	Config
	QueryRequest
	ClientList
	Client
	ClientName
	DebugRequest
	DebugResponse
*/
package gorram

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingMsg struct {
	IsAlive        bool  `protobuf:"varint,1,opt,name=is_alive,json=isAlive" json:"is_alive,omitempty"`
	CfgLastUpdated int64 `protobuf:"varint,2,opt,name=cfg_last_updated,json=cfgLastUpdated" json:"cfg_last_updated,omitempty"`
}

func (m *PingMsg) Reset()                    { *m = PingMsg{} }
func (m *PingMsg) String() string            { return proto.CompactTextString(m) }
func (*PingMsg) ProtoMessage()               {}
func (*PingMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingMsg) GetIsAlive() bool {
	if m != nil {
		return m.IsAlive
	}
	return false
}

func (m *PingMsg) GetCfgLastUpdated() int64 {
	if m != nil {
		return m.CfgLastUpdated
	}
	return 0
}

type PingResponse struct {
	CfgOutOfSync bool `protobuf:"varint,1,opt,name=cfg_out_of_sync,json=cfgOutOfSync" json:"cfg_out_of_sync,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResponse) GetCfgOutOfSync() bool {
	if m != nil {
		return m.CfgOutOfSync
	}
	return false
}

type Submitted struct {
	SuccessfullySubmitted bool `protobuf:"varint,1,opt,name=successfully_submitted,json=successfullySubmitted" json:"successfully_submitted,omitempty"`
}

func (m *Submitted) Reset()                    { *m = Submitted{} }
func (m *Submitted) String() string            { return proto.CompactTextString(m) }
func (*Submitted) ProtoMessage()               {}
func (*Submitted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Submitted) GetSuccessfullySubmitted() bool {
	if m != nil {
		return m.SuccessfullySubmitted
	}
	return false
}

type Issue struct {
	// Host that generated the issue
	// NOTE: THIS SHOULD BE SET BY THE SERVER!
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	// Title of the check that generated the issue
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	// Message of the issue
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *Issue) Reset()                    { *m = Issue{} }
func (m *Issue) String() string            { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()               {}
func (*Issue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Issue) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Issue) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Issue) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Alert struct {
	Issue *Issue `protobuf:"bytes,1,opt,name=issue" json:"issue,omitempty"`
	// When issue was sent
	TimeSubmitted int64 `protobuf:"varint,3,opt,name=time_submitted,json=timeSubmitted" json:"time_submitted,omitempty"`
	// How many times this identical alert has been sent
	Occurrences int64 `protobuf:"varint,4,opt,name=occurrences" json:"occurrences,omitempty"`
}

func (m *Alert) Reset()                    { *m = Alert{} }
func (m *Alert) String() string            { return proto.CompactTextString(m) }
func (*Alert) ProtoMessage()               {}
func (*Alert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Alert) GetIssue() *Issue {
	if m != nil {
		return m.Issue
	}
	return nil
}

func (m *Alert) GetTimeSubmitted() int64 {
	if m != nil {
		return m.TimeSubmitted
	}
	return 0
}

func (m *Alert) GetOccurrences() int64 {
	if m != nil {
		return m.Occurrences
	}
	return 0
}

type ConfigRequest struct {
	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfigRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

type Config struct {
	// Used internally to tell when config was last updated
	LastUpdated int64 `protobuf:"varint,1,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
	// How often checks should be performed on the client
	Interval int64 `protobuf:"varint,2,opt,name=interval" json:"interval,omitempty"`
	// Configurations for various checks
	Deluge    *Config_Deluge          `protobuf:"bytes,3,opt,name=deluge" json:"deluge,omitempty"`
	Loadavg   *Config_LoadAvg         `protobuf:"bytes,4,opt,name=loadavg" json:"loadavg,omitempty"`
	Diskspace []*Config_DiskSpace     `protobuf:"bytes,5,rep,name=diskspace" json:"diskspace,omitempty"`
	Process   []*Config_ProcessExists `protobuf:"bytes,6,rep,name=process" json:"process,omitempty"`
	GetUrl    []*Config_GetURL        `protobuf:"bytes,7,rep,name=get_url,json=getUrl" json:"get_url,omitempty"`
	// A string of enabled checks
	EnabledChecks string `protobuf:"bytes,8,opt,name=enabled_checks,json=enabledChecks" json:"enabled_checks,omitempty"`
	// Whether client is required to connect
	// Since the server is stateless, this ensures an offline client is detected when the server is restarted
	Required bool `protobuf:"varint,9,opt,name=required" json:"required,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Config) GetLastUpdated() int64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *Config) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *Config) GetDeluge() *Config_Deluge {
	if m != nil {
		return m.Deluge
	}
	return nil
}

func (m *Config) GetLoadavg() *Config_LoadAvg {
	if m != nil {
		return m.Loadavg
	}
	return nil
}

func (m *Config) GetDiskspace() []*Config_DiskSpace {
	if m != nil {
		return m.Diskspace
	}
	return nil
}

func (m *Config) GetProcess() []*Config_ProcessExists {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *Config) GetGetUrl() []*Config_GetURL {
	if m != nil {
		return m.GetUrl
	}
	return nil
}

func (m *Config) GetEnabledChecks() string {
	if m != nil {
		return m.EnabledChecks
	}
	return ""
}

func (m *Config) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

type Config_Deluge struct {
	Url         string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	MaxTorrents int64  `protobuf:"varint,3,opt,name=max_torrents,json=maxTorrents" json:"max_torrents,omitempty"`
}

func (m *Config_Deluge) Reset()                    { *m = Config_Deluge{} }
func (m *Config_Deluge) String() string            { return proto.CompactTextString(m) }
func (*Config_Deluge) ProtoMessage()               {}
func (*Config_Deluge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *Config_Deluge) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Config_Deluge) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Config_Deluge) GetMaxTorrents() int64 {
	if m != nil {
		return m.MaxTorrents
	}
	return 0
}

type Config_LoadAvg struct {
	MaxLoad float64 `protobuf:"fixed64,1,opt,name=max_load,json=maxLoad" json:"max_load,omitempty"`
}

func (m *Config_LoadAvg) Reset()                    { *m = Config_LoadAvg{} }
func (m *Config_LoadAvg) String() string            { return proto.CompactTextString(m) }
func (*Config_LoadAvg) ProtoMessage()               {}
func (*Config_LoadAvg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 1} }

func (m *Config_LoadAvg) GetMaxLoad() float64 {
	if m != nil {
		return m.MaxLoad
	}
	return 0
}

type Config_DiskSpace struct {
	Partition string  `protobuf:"bytes,1,opt,name=partition" json:"partition,omitempty"`
	MaxUsage  float64 `protobuf:"fixed64,2,opt,name=max_usage,json=maxUsage" json:"max_usage,omitempty"`
	MinFreeGb uint64  `protobuf:"varint,3,opt,name=min_free_gb,json=minFreeGb" json:"min_free_gb,omitempty"`
}

func (m *Config_DiskSpace) Reset()                    { *m = Config_DiskSpace{} }
func (m *Config_DiskSpace) String() string            { return proto.CompactTextString(m) }
func (*Config_DiskSpace) ProtoMessage()               {}
func (*Config_DiskSpace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 2} }

func (m *Config_DiskSpace) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *Config_DiskSpace) GetMaxUsage() float64 {
	if m != nil {
		return m.MaxUsage
	}
	return 0
}

func (m *Config_DiskSpace) GetMinFreeGb() uint64 {
	if m != nil {
		return m.MinFreeGb
	}
	return 0
}

type Config_ProcessExists struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	User string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *Config_ProcessExists) Reset()                    { *m = Config_ProcessExists{} }
func (m *Config_ProcessExists) String() string            { return proto.CompactTextString(m) }
func (*Config_ProcessExists) ProtoMessage()               {}
func (*Config_ProcessExists) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 3} }

func (m *Config_ProcessExists) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Config_ProcessExists) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type Config_GetURL struct {
	Url          string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	ExpectedBody string `protobuf:"bytes,2,opt,name=expected_body,json=expectedBody" json:"expected_body,omitempty"`
}

func (m *Config_GetURL) Reset()                    { *m = Config_GetURL{} }
func (m *Config_GetURL) String() string            { return proto.CompactTextString(m) }
func (*Config_GetURL) ProtoMessage()               {}
func (*Config_GetURL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 4} }

func (m *Config_GetURL) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Config_GetURL) GetExpectedBody() string {
	if m != nil {
		return m.ExpectedBody
	}
	return ""
}

type QueryRequest struct {
	// When query was sent
	TimeSubmitted int64 `protobuf:"varint,3,opt,name=time_submitted,json=timeSubmitted" json:"time_submitted,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *QueryRequest) GetTimeSubmitted() int64 {
	if m != nil {
		return m.TimeSubmitted
	}
	return 0
}

type ClientList struct {
	Clients map[string]*Client `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ClientList) Reset()                    { *m = ClientList{} }
func (m *ClientList) String() string            { return proto.CompactTextString(m) }
func (*ClientList) ProtoMessage()               {}
func (*ClientList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ClientList) GetClients() map[string]*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type Client struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Client) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ClientName struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ClientName) Reset()                    { *m = ClientName{} }
func (m *ClientName) String() string            { return proto.CompactTextString(m) }
func (*ClientName) ProtoMessage()               {}
func (*ClientName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ClientName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DebugRequest struct {
	Debug bool `protobuf:"varint,1,opt,name=debug" json:"debug,omitempty"`
}

func (m *DebugRequest) Reset()                    { *m = DebugRequest{} }
func (m *DebugRequest) String() string            { return proto.CompactTextString(m) }
func (*DebugRequest) ProtoMessage()               {}
func (*DebugRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DebugRequest) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

type DebugResponse struct {
	Resp string `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
}

func (m *DebugResponse) Reset()                    { *m = DebugResponse{} }
func (m *DebugResponse) String() string            { return proto.CompactTextString(m) }
func (*DebugResponse) ProtoMessage()               {}
func (*DebugResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DebugResponse) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

func init() {
	proto.RegisterType((*PingMsg)(nil), "gorram.PingMsg")
	proto.RegisterType((*PingResponse)(nil), "gorram.PingResponse")
	proto.RegisterType((*Submitted)(nil), "gorram.Submitted")
	proto.RegisterType((*Issue)(nil), "gorram.Issue")
	proto.RegisterType((*Alert)(nil), "gorram.Alert")
	proto.RegisterType((*ConfigRequest)(nil), "gorram.ConfigRequest")
	proto.RegisterType((*Config)(nil), "gorram.Config")
	proto.RegisterType((*Config_Deluge)(nil), "gorram.Config.Deluge")
	proto.RegisterType((*Config_LoadAvg)(nil), "gorram.Config.LoadAvg")
	proto.RegisterType((*Config_DiskSpace)(nil), "gorram.Config.DiskSpace")
	proto.RegisterType((*Config_ProcessExists)(nil), "gorram.Config.ProcessExists")
	proto.RegisterType((*Config_GetURL)(nil), "gorram.Config.GetURL")
	proto.RegisterType((*QueryRequest)(nil), "gorram.QueryRequest")
	proto.RegisterType((*ClientList)(nil), "gorram.ClientList")
	proto.RegisterType((*Client)(nil), "gorram.Client")
	proto.RegisterType((*ClientName)(nil), "gorram.ClientName")
	proto.RegisterType((*DebugRequest)(nil), "gorram.DebugRequest")
	proto.RegisterType((*DebugResponse)(nil), "gorram.DebugResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Reporter service

type ReporterClient interface {
	// Hello should be called once upon initial connection. It syncs the config and stops any timers
	Hello(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*Config, error)
	// Ping is a heartbeat check, ran every X seconds to ensure a client is still alive
	// The cfg_last_updated variable sent, and cfg_out_of_sync received also allow syncing the config
	Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*PingResponse, error)
	RecordIssue(ctx context.Context, opts ...grpc.CallOption) (Reporter_RecordIssueClient, error)
	ConfigSync(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*Config, error)
}

type reporterClient struct {
	cc *grpc.ClientConn
}

func NewReporterClient(cc *grpc.ClientConn) ReporterClient {
	return &reporterClient{cc}
}

func (c *reporterClient) Hello(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/gorram.Reporter/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterClient) Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/gorram.Reporter/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterClient) RecordIssue(ctx context.Context, opts ...grpc.CallOption) (Reporter_RecordIssueClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Reporter_serviceDesc.Streams[0], c.cc, "/gorram.Reporter/RecordIssue", opts...)
	if err != nil {
		return nil, err
	}
	x := &reporterRecordIssueClient{stream}
	return x, nil
}

type Reporter_RecordIssueClient interface {
	Send(*Issue) error
	CloseAndRecv() (*Submitted, error)
	grpc.ClientStream
}

type reporterRecordIssueClient struct {
	grpc.ClientStream
}

func (x *reporterRecordIssueClient) Send(m *Issue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reporterRecordIssueClient) CloseAndRecv() (*Submitted, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Submitted)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reporterClient) ConfigSync(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/gorram.Reporter/ConfigSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reporter service

type ReporterServer interface {
	// Hello should be called once upon initial connection. It syncs the config and stops any timers
	Hello(context.Context, *ConfigRequest) (*Config, error)
	// Ping is a heartbeat check, ran every X seconds to ensure a client is still alive
	// The cfg_last_updated variable sent, and cfg_out_of_sync received also allow syncing the config
	Ping(context.Context, *PingMsg) (*PingResponse, error)
	RecordIssue(Reporter_RecordIssueServer) error
	ConfigSync(context.Context, *ConfigRequest) (*Config, error)
}

func RegisterReporterServer(s *grpc.Server, srv ReporterServer) {
	s.RegisterService(&_Reporter_serviceDesc, srv)
}

func _Reporter_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gorram.Reporter/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).Hello(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reporter_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gorram.Reporter/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).Ping(ctx, req.(*PingMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reporter_RecordIssue_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReporterServer).RecordIssue(&reporterRecordIssueServer{stream})
}

type Reporter_RecordIssueServer interface {
	SendAndClose(*Submitted) error
	Recv() (*Issue, error)
	grpc.ServerStream
}

type reporterRecordIssueServer struct {
	grpc.ServerStream
}

func (x *reporterRecordIssueServer) SendAndClose(m *Submitted) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reporterRecordIssueServer) Recv() (*Issue, error) {
	m := new(Issue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Reporter_ConfigSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServer).ConfigSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gorram.Reporter/ConfigSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServer).ConfigSync(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gorram.Reporter",
	HandlerType: (*ReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Reporter_Hello_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Reporter_Ping_Handler,
		},
		{
			MethodName: "ConfigSync",
			Handler:    _Reporter_ConfigSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordIssue",
			Handler:       _Reporter_RecordIssue_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/gorram.proto",
}

// Client API for Querier service

type QuerierClient interface {
	List(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ClientList, error)
	Delete(ctx context.Context, in *ClientName, opts ...grpc.CallOption) (*ClientList, error)
	Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error)
}

type querierClient struct {
	cc *grpc.ClientConn
}

func NewQuerierClient(cc *grpc.ClientConn) QuerierClient {
	return &querierClient{cc}
}

func (c *querierClient) List(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ClientList, error) {
	out := new(ClientList)
	err := grpc.Invoke(ctx, "/gorram.Querier/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *querierClient) Delete(ctx context.Context, in *ClientName, opts ...grpc.CallOption) (*ClientList, error) {
	out := new(ClientList)
	err := grpc.Invoke(ctx, "/gorram.Querier/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *querierClient) Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error) {
	out := new(DebugResponse)
	err := grpc.Invoke(ctx, "/gorram.Querier/Debug", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Querier service

type QuerierServer interface {
	List(context.Context, *QueryRequest) (*ClientList, error)
	Delete(context.Context, *ClientName) (*ClientList, error)
	Debug(context.Context, *DebugRequest) (*DebugResponse, error)
}

func RegisterQuerierServer(s *grpc.Server, srv QuerierServer) {
	s.RegisterService(&_Querier_serviceDesc, srv)
}

func _Querier_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gorram.Querier/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServer).List(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Querier_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gorram.Querier/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServer).Delete(ctx, req.(*ClientName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Querier_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gorram.Querier/Debug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServer).Debug(ctx, req.(*DebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Querier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gorram.Querier",
	HandlerType: (*QuerierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Querier_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Querier_Delete_Handler,
		},
		{
			MethodName: "Debug",
			Handler:    _Querier_Debug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gorram.proto",
}

func init() { proto.RegisterFile("proto/gorram.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 975 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xd9, 0x6e, 0xdb, 0x46,
	0x14, 0x35, 0x6d, 0x49, 0xb4, 0xae, 0x24, 0x27, 0x1d, 0xd8, 0x01, 0xcb, 0x06, 0x8d, 0x4b, 0x3b,
	0x80, 0x5f, 0xea, 0x18, 0x0a, 0xec, 0x2e, 0x2f, 0x85, 0xe3, 0xa4, 0xe9, 0xe2, 0x26, 0x29, 0x5d,
	0x3f, 0xf4, 0x89, 0x18, 0x91, 0x57, 0xf4, 0xc0, 0x24, 0x87, 0x99, 0x19, 0xba, 0xd6, 0x77, 0xf4,
	0x2b, 0xfa, 0x49, 0xfd, 0x89, 0x7e, 0x43, 0x31, 0x0b, 0xb5, 0x35, 0x05, 0xf2, 0x36, 0xf7, 0xdc,
	0x65, 0xe6, 0x9e, 0xbb, 0x0c, 0x90, 0x5a, 0x70, 0xc5, 0x9f, 0xe5, 0x5c, 0x08, 0x5a, 0x1e, 0x1b,
	0x81, 0xf4, 0xac, 0x14, 0xbd, 0x01, 0xff, 0x1d, 0xab, 0xf2, 0x5f, 0x64, 0x4e, 0x3e, 0x85, 0x6d,
	0x26, 0x13, 0x5a, 0xb0, 0x3b, 0x0c, 0xbc, 0x7d, 0xef, 0x68, 0x3b, 0xf6, 0x99, 0x3c, 0xd7, 0x22,
	0x39, 0x82, 0x87, 0xe9, 0x34, 0x4f, 0x0a, 0x2a, 0x55, 0xd2, 0xd4, 0x19, 0x55, 0x98, 0x05, 0x9b,
	0xfb, 0xde, 0xd1, 0x56, 0xbc, 0x93, 0x4e, 0xf3, 0x4b, 0x2a, 0xd5, 0xb5, 0x45, 0xa3, 0x53, 0x18,
	0xea, 0x78, 0x31, 0xca, 0x9a, 0x57, 0x12, 0xc9, 0x53, 0x78, 0xa0, 0x3d, 0x79, 0xa3, 0x12, 0x3e,
	0x4d, 0xe4, 0xac, 0x4a, 0x5d, 0xec, 0x61, 0x3a, 0xcd, 0xdf, 0x36, 0xea, 0xed, 0xf4, 0x6a, 0x56,
	0xa5, 0xd1, 0x0b, 0xe8, 0x5f, 0x35, 0x93, 0x92, 0x29, 0x85, 0x19, 0x39, 0x85, 0x47, 0xb2, 0x49,
	0x53, 0x94, 0x72, 0xda, 0x14, 0xc5, 0x2c, 0x91, 0xad, 0xc6, 0xb9, 0xee, 0x2d, 0x6b, 0xe7, 0x6e,
	0xd1, 0xcf, 0xd0, 0xfd, 0x51, 0xca, 0x06, 0x09, 0x81, 0xce, 0x0d, 0x97, 0xca, 0x58, 0xf7, 0x63,
	0x73, 0x26, 0xbb, 0xd0, 0x55, 0x4c, 0x15, 0x68, 0x9e, 0xdd, 0x8f, 0xad, 0x40, 0x02, 0xf0, 0x4b,
	0x94, 0x92, 0xe6, 0x18, 0x6c, 0x19, 0xbc, 0x15, 0xa3, 0x06, 0xba, 0xe7, 0x05, 0x0a, 0x45, 0x0e,
	0xa0, 0xcb, 0x74, 0x54, 0x13, 0x6d, 0x30, 0x1e, 0x1d, 0x3b, 0x1a, 0xcd, 0x55, 0xb1, 0xd5, 0x91,
	0xa7, 0xb0, 0xa3, 0x58, 0x89, 0x4b, 0x2f, 0xdd, 0x32, 0xec, 0x8c, 0x34, 0xba, 0x48, 0x6c, 0x1f,
	0x06, 0x3c, 0x4d, 0x1b, 0x21, 0xb0, 0x4a, 0x51, 0x06, 0x1d, 0x63, 0xb3, 0x0c, 0x45, 0x27, 0x30,
	0xba, 0xe0, 0xd5, 0x94, 0xe5, 0x31, 0xbe, 0x6f, 0x50, 0x2a, 0xf2, 0x04, 0x06, 0x69, 0xc1, 0xb0,
	0x52, 0x49, 0x45, 0x4b, 0x74, 0x29, 0x81, 0x85, 0xde, 0xd0, 0x12, 0xa3, 0x7f, 0xba, 0xd0, 0xb3,
	0x2e, 0xe4, 0x0b, 0x18, 0xae, 0x54, 0xc8, 0xb3, 0xf1, 0x8b, 0x45, 0x79, 0x48, 0x08, 0xdb, 0xac,
	0x52, 0x28, 0xee, 0x68, 0xe1, 0x0a, 0x38, 0x97, 0xc9, 0x97, 0xd0, 0xcb, 0xb0, 0x68, 0x1c, 0x17,
	0x83, 0xf1, 0x5e, 0x9b, 0xaa, 0x0d, 0x7f, 0xfc, 0xd2, 0x28, 0x63, 0x67, 0x44, 0x4e, 0xc0, 0x2f,
	0x38, 0xcd, 0xe8, 0x5d, 0x6e, 0x12, 0x19, 0x8c, 0x1f, 0xad, 0xd9, 0x5f, 0x72, 0x9a, 0x9d, 0xdf,
	0xe5, 0x71, 0x6b, 0x46, 0xce, 0xa0, 0x9f, 0x31, 0x79, 0x2b, 0x6b, 0x9a, 0x62, 0xd0, 0xdd, 0xdf,
	0x3a, 0x1a, 0x8c, 0x83, 0xf5, 0x3b, 0x98, 0xbc, 0xbd, 0xd2, 0xfa, 0x78, 0x61, 0x4a, 0xce, 0xc0,
	0xaf, 0x05, 0xd7, 0x15, 0x0f, 0x7a, 0xc6, 0xeb, 0xf1, 0x9a, 0xd7, 0x3b, 0xab, 0x7d, 0x75, 0xcf,
	0xa4, 0x92, 0x71, 0x6b, 0x4c, 0x8e, 0xc1, 0xcf, 0x51, 0x25, 0x8d, 0x28, 0x02, 0xdf, 0xf8, 0xad,
	0x67, 0xf4, 0x1a, 0xd5, 0x75, 0x7c, 0x19, 0xf7, 0x72, 0x54, 0xd7, 0xa2, 0xd0, 0x55, 0xc4, 0x8a,
	0x4e, 0x0a, 0xcc, 0x92, 0xf4, 0x06, 0xd3, 0x5b, 0x19, 0x6c, 0x1b, 0xba, 0x47, 0x0e, 0xbd, 0x30,
	0xa0, 0xe6, 0x50, 0xe0, 0xfb, 0x86, 0x09, 0xcc, 0x82, 0xbe, 0x69, 0xc8, 0xb9, 0x1c, 0xfe, 0x0e,
	0x3d, 0x4b, 0x13, 0x79, 0x08, 0x5b, 0xfa, 0x62, 0x5b, 0x30, 0x7d, 0xd4, 0x7e, 0x35, 0x95, 0xf2,
	0x0f, 0x2e, 0x32, 0xd7, 0x85, 0x73, 0x59, 0x97, 0xae, 0xa4, 0xf7, 0x89, 0xe2, 0xba, 0x11, 0x94,
	0x74, 0xed, 0x33, 0x28, 0xe9, 0xfd, 0x6f, 0x0e, 0x0a, 0x0f, 0xc1, 0x77, 0x8c, 0xea, 0x49, 0xd5,
	0xd6, 0x9a, 0x57, 0x73, 0x81, 0x17, 0xfb, 0x25, 0xbd, 0xd7, 0xda, 0x70, 0x0a, 0xfd, 0x39, 0x87,
	0xe4, 0x31, 0xf4, 0x6b, 0x2a, 0x14, 0x53, 0x8c, 0x57, 0xee, 0x25, 0x0b, 0x80, 0x7c, 0x06, 0x7d,
	0x1d, 0xa5, 0x31, 0xed, 0xbf, 0x69, 0xc2, 0xe8, 0xb0, 0xd7, 0x5a, 0x26, 0x9f, 0xc3, 0xa0, 0x64,
	0x55, 0x32, 0x15, 0x88, 0x49, 0x3e, 0x31, 0xef, 0xe9, 0xc4, 0xfd, 0x92, 0x55, 0xdf, 0x0b, 0xc4,
	0xd7, 0x93, 0xf0, 0x2b, 0x18, 0xad, 0xb0, 0xae, 0x87, 0xae, 0xa6, 0xea, 0xa6, 0x1d, 0x3a, 0x7d,
	0xd6, 0x58, 0x23, 0x51, 0xb8, 0x6c, 0xcd, 0x39, 0xfc, 0x0e, 0x7a, 0x96, 0xf6, 0x0f, 0x30, 0x74,
	0x00, 0x23, 0xbc, 0xaf, 0x31, 0x55, 0x98, 0x25, 0x13, 0x9e, 0xcd, 0x9c, 0xe3, 0xb0, 0x05, 0x5f,
	0xf0, 0x6c, 0xa6, 0x37, 0xcc, 0xaf, 0x0d, 0x8a, 0x59, 0x3b, 0x21, 0x1f, 0x37, 0x7b, 0xd1, 0x9f,
	0x1e, 0xc0, 0x85, 0x19, 0x9b, 0x4b, 0x26, 0x15, 0xf9, 0x06, 0x7c, 0x3b, 0x44, 0x32, 0xf0, 0x4c,
	0x6f, 0x3c, 0x99, 0xf7, 0xc6, 0xdc, 0xc8, 0x1d, 0xe5, 0xab, 0x4a, 0x89, 0x59, 0xdc, 0xda, 0x87,
	0x3f, 0xc1, 0x70, 0x59, 0xa1, 0xf3, 0xb8, 0xc5, 0x59, 0x9b, 0xc7, 0x2d, 0xce, 0xc8, 0x21, 0x74,
	0xef, 0x68, 0xd1, 0x58, 0x56, 0x07, 0xe3, 0x9d, 0xd5, 0xd0, 0xb1, 0x55, 0x7e, 0xbb, 0xf9, 0xb5,
	0x17, 0x9d, 0x41, 0xcf, 0x82, 0x9a, 0xab, 0xa5, 0x09, 0x37, 0x67, 0xbd, 0x9e, 0x68, 0x96, 0x09,
	0xdd, 0xf8, 0x96, 0x89, 0x56, 0x8c, 0xf6, 0xdb, 0x64, 0xf4, 0x0e, 0xf8, 0x90, 0x6f, 0x74, 0x08,
	0xc3, 0x97, 0x38, 0x69, 0xe6, 0x8b, 0x64, 0x17, 0xba, 0x99, 0x96, 0xdd, 0x0e, 0xb5, 0x42, 0x74,
	0x00, 0x23, 0x67, 0xe5, 0xf6, 0x35, 0x81, 0x8e, 0x40, 0x59, 0xb7, 0xa1, 0xf4, 0x79, 0xfc, 0xb7,
	0x07, 0xdb, 0x31, 0xd6, 0x5c, 0x28, 0x14, 0xe4, 0x04, 0xba, 0x3f, 0x60, 0x51, 0x70, 0xb2, 0x36,
	0x4c, 0xee, 0x9e, 0x70, 0x67, 0x15, 0x8e, 0x36, 0xc8, 0x33, 0xe8, 0xe8, 0x2f, 0x81, 0x3c, 0x68,
	0x35, 0xee, 0xc3, 0x09, 0x77, 0x97, 0x81, 0xf6, 0x05, 0xd1, 0x06, 0x79, 0x0e, 0x83, 0x18, 0x53,
	0x2e, 0x32, 0xbb, 0xce, 0x57, 0x57, 0x6e, 0xf8, 0x49, 0x2b, 0x2e, 0x6a, 0xbb, 0x71, 0xe4, 0x91,
	0x53, 0x00, 0x7b, 0xa3, 0xfe, 0x4f, 0x3e, 0xfa, 0x71, 0xe3, 0xbf, 0x3c, 0xf0, 0x75, 0x3b, 0x31,
	0x14, 0x64, 0x0c, 0x1d, 0xd3, 0x1b, 0xf3, 0x77, 0x2d, 0xf7, 0x59, 0x48, 0xfe, 0xdb, 0x20, 0xd1,
	0x06, 0x19, 0x9b, 0x81, 0x47, 0x85, 0x64, 0x4d, 0xaf, 0x0b, 0xf3, 0x3f, 0x3e, 0x67, 0xd0, 0x35,
	0xa4, 0x2f, 0x2e, 0x5a, 0xae, 0x54, 0xb8, 0xb7, 0x86, 0xb6, 0xbc, 0x4c, 0x7a, 0xe6, 0xeb, 0x7e,
	0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xce, 0x81, 0x17, 0xd0, 0x07, 0x00, 0x00,
}
