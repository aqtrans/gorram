syntax = "proto3";

package gorram;

service Reporter {
    // Ping is a heartbeat check, ran every X seconds to ensure a client is still alive
    // The cfg_last_updated variable sent, and cfg_out_of_sync received also allow syncing the config
    rpc Ping(PingMsg) returns (PingResponse) {}
    rpc RecordIssue(stream Issue) returns (Submitted) {}
    rpc ConfigSync(ConfigRequest) returns (Config) {}
}

message PingMsg {
    bool is_alive = 1;
    int64 cfg_last_updated = 2;
}

message PingResponse {
    bool cfg_out_of_sync = 1;
}

message Submitted {
    bool successfully_submitted = 1;
}

message Issue {
    string title = 1;
    // Message itself
    string message = 2;
    // When issue was sent
    int64 time_submitted = 3;
}

message ConfigRequest {
    string client_name = 1;
}

message Config {
    // Used internally to tell when 
    int64 last_updated = 1;
    int64 interval = 2;
    // Only allow one Deluge check per-host
    Deluge deluge = 3;
    // Only one load check per-host
    Load load = 4;
    // Allow multiple instances of other checks
    repeated DiskSpace disk = 5;
    repeated ProcessExists ps = 6;
    repeated GetURL get_url = 7;
}

message Deluge {
    string url = 1;
    string password = 2;
    int64 max_torrents = 3;
}

message DiskSpace {
    string partition = 1;
    double max_usage = 2;
}

message Load {
    double max_load = 1;
}

message ProcessExists {
    string path = 1;
    string user = 2;
}

message GetURL {
    string url = 1;
    string expected_body = 2;
}

service Querier {
    rpc List(QueryRequest) returns (ClientList) {}
}

message QueryRequest {
    // When query was sent
    int64 time_submitted = 3;    
}

message ClientList {
    map<string, Client> clients = 1;
}

message Client {
    string name = 1;
    bool connected = 2;
}
