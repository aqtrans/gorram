syntax = "proto3";

package proto;

option go_package = "git.jba.io/go/gorram/proto;proto";

service Reporter {
    // Hello should be called once upon initial connection. It authenticates the client and stops any timers
    rpc Hello(LoginRequest) returns (Token) {}
    // Ping is a heartbeat check, ran every X seconds to ensure a client is still alive
    // The cfg_last_updated variable sent, and cfg_out_of_sync received also allow syncing the config
    rpc Ping(PingMsg) returns (PingResponse) {}
    rpc RecordIssue(Issue) returns (Submitted) {}
    rpc ConfigSync(ConfigRequest) returns (EncryptedConfig) {}
}

message PingMsg {
    bool is_alive = 1;
    int64 cfg_last_updated = 2;
}

message PingResponse {
    bool cfg_out_of_sync = 1;
}

message Submitted {
    bool successfully_submitted = 1;
}

message Issue {
    // Host that generated the issue
    // NOTE: THIS SHOULD BE SET BY THE SERVER!
    string host = 1;
    // Title of the check that generated the issue
    string title = 2;
    // Message of the issue
    string message = 3;
}

message Alert {
    Issue issue = 1;
    // When issue was sent
    int64 time_submitted = 3;
    // How many times this identical alert has been sent
    int64 occurrences = 4;
    // If alert was muted
    bool muted = 5;
    // When issue last occurred
    int64 time_last = 6;
}

message ConfigRequest {
    string client_name = 1;
}

message Config {
    message Deluge {
        string url = 1;
        string password = 2;
        int64 max_torrents = 3;
    }
    message LoadAvg {
        double max_load = 1;
    }
    message DiskSpace {
        string partition = 1;
        double max_usage = 2;
        int64  min_free_gb = 3;
    }
    message ProcessExists {
        string path = 1;
        string user = 2;
    }    
    message GetURL {
        string url = 1;
        string expected_body = 2;
    }
    message Memory {
        double max_usage = 1;
    }
    message Postgres {
        string connect_string = 1;
        string client_address = 2;
    }
    
    // Used internally to tell when config was last updated
    int64 last_updated = 1;
    // How often checks should be performed on the client
    int64 interval = 2;
    // Configurations for various checks
    Deluge deluge = 3;
    LoadAvg loadavg = 4;
    repeated DiskSpace diskspace = 5;
    repeated ProcessExists process = 6;
    repeated GetURL get_url = 7;
    // A string of enabled checks
    string enabled_checks = 8;
    // Whether client is required to connect
    // Since the server is stateless, this ensures an offline client is detected when the server is restarted
    bool required = 9;

    Memory memory = 10;
    Postgres postgres = 11;  
    // Public key of the client
    string public_key = 12;
}

service Querier {
    rpc List(QueryRequest) returns (ClientList) {}
    rpc Delete(ClientName) returns (ClientList) {}
    rpc Debug(DebugRequest) returns (DebugResponse) {}
}

message QueryRequest {
    // When query was sent
    int64 time_submitted = 3;    
}

message ClientList {
    map<string, Client> clients = 1;
}

message Client {
    string name = 1;
    string address = 2;
    int64 last_ping_time = 3;
    Token token = 4;
}

message LoginRequest {
    string login_token = 1;
}

message Token {
    string api_token = 1;
}

message ClientName {
    string name = 1;
}

message DebugRequest {
    bool debug = 1;
}

message DebugResponse {
    string resp = 1;
}

message EncryptedConfig {
    bytes bytes = 1;
}