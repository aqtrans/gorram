syntax = "proto3";

package gorram;

service Reporter {
    // Hello should be called once upon initial connection. It syncs the config and stops any timers
    rpc Hello(ConfigRequest) returns (Config) {}
    // Ping is a heartbeat check, ran every X seconds to ensure a client is still alive
    // The cfg_last_updated variable sent, and cfg_out_of_sync received also allow syncing the config
    rpc Ping(PingMsg) returns (PingResponse) {}
    rpc RecordIssue(stream Issue) returns (Submitted) {}
    rpc ConfigSync(ConfigRequest) returns (Config) {}
}

message PingMsg {
    bool is_alive = 1;
    int64 cfg_last_updated = 2;
}

message PingResponse {
    bool cfg_out_of_sync = 1;
}

message Submitted {
    bool successfully_submitted = 1;
}

message Issue {
    // Host that generated the issue
    string host = 1;
    // Title of the check that generated the issue
    string title = 2;
    // Message of the issue
    string message = 3;
}

message Alert {
    Issue issue = 1;
    // When issue was sent
    int64 time_submitted = 3;
    // How many times this identical alert has been sent
    int64 occurrences = 4;
}

message ConfigRequest {
    string client_name = 1;
}

message Config {
    // Used internally to tell when config was last updated
    int64 last_updated = 1;
    int64 interval = 2;

    message Deluge {
        string url = 1;
        string password = 2;
        int64 max_torrents = 3;
    }
    Deluge deluge = 3;

    message LoadAvg {
        double max_load = 1;
    }
    LoadAvg load = 4;

    message DiskSpace {
        string partition = 1;
        double max_usage = 2;
        uint64  min_free_gb = 3;
    }
    repeated DiskSpace disk = 5;

    message ProcessExists {
        string path = 1;
        string user = 2;
    }    
    repeated ProcessExists ps = 6;

    message GetURL {
        string url = 1;
        string expected_body = 2;
    }    
    repeated GetURL get_url = 7;
}

service Querier {
    rpc List(QueryRequest) returns (ClientList) {}
    rpc Delete(ClientName) returns (ClientList) {}
    rpc Debug(DebugRequest) returns (DebugResponse) {}
}

message QueryRequest {
    // When query was sent
    int64 time_submitted = 3;    
}

message ClientList {
    map<string, Client> clients = 1;
}

message Client {
    string name = 1;
    string address = 2;
}

message ClientName {
    string name = 1;
}

message DebugRequest {
    bool debug = 1;
}

message DebugResponse {
    string resp = 1;
}