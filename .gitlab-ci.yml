image: golang:latest

##cache:
##  key: "$CI_COMMIT_REF_NAME"
##  paths:
##    - vendor/

before_script:
  - echo deb http://deb.debian.org/debian/ stable main > /etc/apt/sources.list
  - apt-get update -y && apt-get install unzip -y
  - curl -o protoc.zip -sL https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip
  - unzip protoc.zip -d /protoc
  - export PATH=$PATH:/protoc/bin:$GOPATH/bin
  ##- ln -s /builds /go/src/git.jba.io
  ##- cd /go/src/git.jba.io/go/gorram
  #- 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  #- eval $(ssh-agent -s)
  #- ssh-add <(echo "$SSH_PRIVATE_KEY")
  #- mkdir -p ~/.ssh
  #- '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'

stages:
  - install-environment
  - build
  - test  
  - package
  - deploy  

install-go:
  stage: install-environment
  script:
    - go version
    - echo $PATH
    - echo $GOPATH
    - go env
    - which go

build-my-project:
  stage: build
  script:
    #- curl -o dep -sL https://github.com/golang/dep/releases/download/v0.5.4/dep-linux-amd64
    #- chmod +x dep
    - cd server
    #- ../dep ensure
    - go get -d
    - cd ../checks
    #- ../dep ensure
    - go get -d
    - cd ../client
    - go get -d
    - cd ../
    - go get -u github.com/golang/protobuf/protoc-gen-go
    - go generate
    - go get -d
    - cd server/
    - go build -o ../gorram-server
    - cd ../client/
    - go build -o ../gorram-client
  artifacts:
    expire_in: 1 day
    paths:
      - gorram-server
      - gorram-client

test-server:
  stage: test
  coverage: '/coverage: \d+\.\d+/'
  script:
    - cd server
    - go get -d  
    - go test -v
    - go test -race
    - go test -cover
    - cd ../client
    - go get -d  
    - go test -v
    - go test -race
    - go test -cover

build-package:
  stage: package
  script:
    - apt update && apt install -y build-essential devscripts debhelper
    - cp gorram-client client/
    - cp gorram-server server/
    - cd server/
    - dch -M -v 1.0-$CI_COMMIT_REF_NAME-$CI_JOB_ID "New version from Git" && dch -M -r -D stretch ""
    - debuild -us -uc -b
    - cd ../client/
    - dch -M -v 1.0-$CI_COMMIT_REF_NAME-$CI_JOB_ID "New version from Git" && dch -M -r -D stretch ""
    - debuild -us -uc -b
    - cd ../ && mv gorram-client_*.deb client/gorram-client.deb && mv gorram-server_*.deb server/gorram-server.deb
  artifacts:
    expire_in: 1 day
    paths:
      - client/gorram-client.deb
      - server/gorram-server.deb

#deploy_to_repo:
#  stage: deploy
#  variables:
#    DEPLOY_HOST: 'repo@bob.jba.io'
#  script:
#    - scp ./client/gorram-client.deb ./server/gorram-server.deb $DEPLOY_HOST:/home/repo/
#    - ssh $DEPLOY_HOST reprepro -b www/debian/ includedeb stretch *.deb

deploy_to_prod:
  stage: deploy
  variables:
    DEPLOY_HOST: 'deploy@bob.jba.io'
  script:
    - scp ./client/gorram-client.deb ./server/gorram-server.deb $DEPLOY_HOST:/home/deploy/
    - ssh $DEPLOY_HOST sudo dpkg -i gorram-server.deb gorram-client.deb
    - scp ./client/gorram-client.deb deploy@rick.jba.io:/home/deploy/
    - ssh deploy@rick.jba.io sudo dpkg -i gorram-client.deb

#deploy_prod:
#  stage: deploy
#  script:
#    # Stop client and server on Frink
#    - ssh gorram@frink.jba.io sudo systemctl stop gorram-server gorram-client  
#    # scp client to /opt/gorram/gorram-client on Frink
#    - scp gorram-client gorram@frink.jba.io:/opt/gorram/gorram-client  
#    # scp server to /opt/gorram/gorram-server on Frink
#    - scp gorram-server gorram@frink.jba.io:/opt/gorram/gorram-server
#    # Restart client and server on Rick
#    - ssh gorram@frink.jba.io sudo systemctl start gorram-server gorram-client
#    # Stop client on Rick
#    - ssh gorram@rick.jba.io sudo systemctl stop gorram-client    
#    # scp client to /opt/gorram/gorram-client on Rick
#    - scp gorram-client gorram@rick.jba.io:/opt/gorram/gorram-client
#    # Restart client on Rick
#    - ssh gorram@rick.jba.io sudo systemctl start gorram-client
#  environment:
#    name: production
#  only:
#    - master
